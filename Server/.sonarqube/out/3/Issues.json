{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Compilador de Microsoft (R) Visual C#",
        "version": "4.11.0.0",
        "fileVersion": "4.11.0-3.24365.8 (9e9c7c1d)",
        "semanticVersion": "4.11.0",
        "language": "es-MX"
      },
      "results": [
        {
          "ruleId": "S3260",
          "level": "warning",
          "message": "Private classes which are not derived in the current assembly should be marked as 'sealed'.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/neco3/source/repos/RepositorioServidor/BMCServerV2/Server/Host/Program.cs",
                "region": {
                  "startLine": 89,
                  "startColumn": 23,
                  "endLine": 89,
                  "endColumn": 40
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S6667",
          "level": "warning",
          "message": "Logging in a catch clause should pass the caught exception as a parameter.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/neco3/source/repos/RepositorioServidor/BMCServerV2/Server/Host/Program.cs",
                "region": {
                  "startLine": 76,
                  "startColumn": 21,
                  "endLine": 76,
                  "endColumn": 90
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S6667",
          "level": "warning",
          "message": "Logging in a catch clause should pass the caught exception as a parameter.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/neco3/source/repos/RepositorioServidor/BMCServerV2/Server/Host/Program.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 17,
                  "endLine": 51,
                  "endColumn": 68
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2629",
          "level": "warning",
          "message": "Don't use string concatenation in logging message templates.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/neco3/source/repos/RepositorioServidor/BMCServerV2/Server/Host/Program.cs",
                "region": {
                  "startLine": 51,
                  "startColumn": 30,
                  "endLine": 51,
                  "endColumn": 67
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "S2629",
          "level": "warning",
          "message": "Don't use string interpolation in logging message templates.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Users/neco3/source/repos/RepositorioServidor/BMCServerV2/Server/Host/Program.cs",
                "region": {
                  "startLine": 76,
                  "startColumn": 34,
                  "endLine": 76,
                  "endColumn": 89
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        }
      ],
      "rules": {
        "S2629": {
          "id": "S2629",
          "shortDescription": "Logging templates should be constant",
          "fullDescription": "Logging arguments should not require evaluation in order to avoid unnecessary performance overhead. When passing concatenated strings or string interpolations directly into a logging method, the evaluation of these expressions occurs every time the logging method is called, regardless of the log level. This can lead to inefficient code execution and increased resource consumption.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-2629",
          "properties": {
            "category": "Major Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S3260": {
          "id": "S3260",
          "shortDescription": "Non-derived \"private\" classes and records should be \"sealed\"",
          "fullDescription": "Classes and records with either private or file access modifiers aren’t visible outside of their assemblies or files, so if they’re not extended inside their scope, they should be made explicitly non-extensible with the addition of the sealed keyword.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-3260",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        },
        "S6667": {
          "id": "S6667",
          "shortDescription": "Logging in a catch clause should pass the caught exception as a parameter.",
          "fullDescription": "This rule raises an issue on logging calls inside a catch clause that does not pass the raised Exception.",
          "defaultLevel": "warning",
          "helpUri": "https://rules.sonarsource.com/csharp/RSPEC-6667",
          "properties": {
            "category": "Minor Code Smell",
            "isEnabledByDefault": true,
            "tags": [
              "C#",
              "MainSourceScope",
              "SonarWay"
            ]
          }
        }
      }
    }
  ]
}