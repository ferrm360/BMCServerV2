//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTest.LobbyService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LobbyService.ILobbyService", CallbackContract=typeof(ServiceTest.LobbyService.ILobbyServiceCallback))]
    public interface ILobbyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreateLobby", ReplyAction="http://tempuri.org/ILobbyService/CreateLobbyResponse")]
        Service.Utilities.Results.LobbyResponse CreateLobby(Service.DTO.CreateLobbyRequestDTO request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreateLobby", ReplyAction="http://tempuri.org/ILobbyService/CreateLobbyResponse")]
        System.Threading.Tasks.Task<Service.Utilities.Results.LobbyResponse> CreateLobbyAsync(Service.DTO.CreateLobbyRequestDTO request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinLobbyResponse")]
        Service.Utilities.Results.LobbyResponse JoinLobby(Service.DTO.JoinLobbyRequestDTO request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinLobbyResponse")]
        System.Threading.Tasks.Task<Service.Utilities.Results.LobbyResponse> JoinLobbyAsync(Service.DTO.JoinLobbyRequestDTO request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/GetAllLobbies", ReplyAction="http://tempuri.org/ILobbyService/GetAllLobbiesResponse")]
        Service.DTO.LobbyDTO[] GetAllLobbies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/GetAllLobbies", ReplyAction="http://tempuri.org/ILobbyService/GetAllLobbiesResponse")]
        System.Threading.Tasks.Task<Service.DTO.LobbyDTO[]> GetAllLobbiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/LeaveLobby", ReplyAction="http://tempuri.org/ILobbyService/LeaveLobbyResponse")]
        Service.Utilities.Results.LobbyResponse LeaveLobby(string lobbyId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/LeaveLobby", ReplyAction="http://tempuri.org/ILobbyService/LeaveLobbyResponse")]
        System.Threading.Tasks.Task<Service.Utilities.Results.LobbyResponse> LeaveLobbyAsync(string lobbyId, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/KickPlayer", ReplyAction="http://tempuri.org/ILobbyService/KickPlayerResponse")]
        Service.Utilities.Results.LobbyResponse KickPlayer(string lobbyId, string hostUsername, string targetUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/KickPlayer", ReplyAction="http://tempuri.org/ILobbyService/KickPlayerResponse")]
        System.Threading.Tasks.Task<Service.Utilities.Results.LobbyResponse> KickPlayerAsync(string lobbyId, string hostUsername, string targetUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/StartGame", ReplyAction="http://tempuri.org/ILobbyService/StartGameResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Service.Utilities.Results.LobbyResponse))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Service.DTO.CreateLobbyRequestDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Service.DTO.LobbyDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Service.DTO.JoinLobbyRequestDTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Service.DTO.LobbyDTO[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        Service.Results.OperationResponse StartGame(string lobbyId, string hostUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/StartGame", ReplyAction="http://tempuri.org/ILobbyService/StartGameResponse")]
        System.Threading.Tasks.Task<Service.Results.OperationResponse> StartGameAsync(string lobbyId, string hostUsername);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/NotifyPlayerJoined")]
        void NotifyPlayerJoined(string playerName, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/NotifyPlayerLeft")]
        void NotifyPlayerLeft(string playerName, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/NotifyPlayerJoinedMessage")]
        void NotifyPlayerJoinedMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/NotifyPlayerLeftMessage")]
        void NotifyPlayerLeftMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/StartGameNotification")]
        void StartGameNotification(string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/NotifyPlayerKicked")]
        void NotifyPlayerKicked();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceChannel : ServiceTest.LobbyService.ILobbyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyServiceClient : System.ServiceModel.DuplexClientBase<ServiceTest.LobbyService.ILobbyService>, ServiceTest.LobbyService.ILobbyService {
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Service.Utilities.Results.LobbyResponse CreateLobby(Service.DTO.CreateLobbyRequestDTO request) {
            return base.Channel.CreateLobby(request);
        }
        
        public System.Threading.Tasks.Task<Service.Utilities.Results.LobbyResponse> CreateLobbyAsync(Service.DTO.CreateLobbyRequestDTO request) {
            return base.Channel.CreateLobbyAsync(request);
        }
        
        public Service.Utilities.Results.LobbyResponse JoinLobby(Service.DTO.JoinLobbyRequestDTO request) {
            return base.Channel.JoinLobby(request);
        }
        
        public System.Threading.Tasks.Task<Service.Utilities.Results.LobbyResponse> JoinLobbyAsync(Service.DTO.JoinLobbyRequestDTO request) {
            return base.Channel.JoinLobbyAsync(request);
        }
        
        public Service.DTO.LobbyDTO[] GetAllLobbies() {
            return base.Channel.GetAllLobbies();
        }
        
        public System.Threading.Tasks.Task<Service.DTO.LobbyDTO[]> GetAllLobbiesAsync() {
            return base.Channel.GetAllLobbiesAsync();
        }
        
        public Service.Utilities.Results.LobbyResponse LeaveLobby(string lobbyId, string username) {
            return base.Channel.LeaveLobby(lobbyId, username);
        }
        
        public System.Threading.Tasks.Task<Service.Utilities.Results.LobbyResponse> LeaveLobbyAsync(string lobbyId, string username) {
            return base.Channel.LeaveLobbyAsync(lobbyId, username);
        }
        
        public Service.Utilities.Results.LobbyResponse KickPlayer(string lobbyId, string hostUsername, string targetUsername) {
            return base.Channel.KickPlayer(lobbyId, hostUsername, targetUsername);
        }
        
        public System.Threading.Tasks.Task<Service.Utilities.Results.LobbyResponse> KickPlayerAsync(string lobbyId, string hostUsername, string targetUsername) {
            return base.Channel.KickPlayerAsync(lobbyId, hostUsername, targetUsername);
        }
        
        public Service.Results.OperationResponse StartGame(string lobbyId, string hostUsername) {
            return base.Channel.StartGame(lobbyId, hostUsername);
        }
        
        public System.Threading.Tasks.Task<Service.Results.OperationResponse> StartGameAsync(string lobbyId, string hostUsername) {
            return base.Channel.StartGameAsync(lobbyId, hostUsername);
        }
    }
}
